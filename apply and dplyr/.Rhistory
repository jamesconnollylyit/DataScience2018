my_list <- list(a = matrix(1:9, 3), b = 1:5, c = matrix(1:4, 2), d = 2)
my_list
lapply(my_list, sum)
library(magrittr)
data(diamonds, package = "ggplot2")
dim(head(diamonds, n=4))
dim(the_names)
the_names <- c("James", "John", "Joe")
lapply(the_names, nchar)
dim(the_names)
first_list <- list(a = matrix(1:9, 3), b = 1:5, c = matrix(1:16, 2), d = 2)
dim(first_list)
first_list
first_list <- list(a = matrix(1:9, 3))
dim(first_list)
?dim
head(diamonds, 4)
dim(head(diamonds, n=4))
dim(head(diamonds, n=4))
data(diamonds)
diamonds %>% head(4) %>% dim
dim(head(diamonds, 4)) # get dimensions of this view
head(diamonds)
class(diamonds)
library(dplyr)
install.packages("dplyr")
library(dplyr)
head(diamonds)
head(diamonds)
class(diamonds)
diamonds
select(diamonds, carat, price)
diamonds %>% select(carat, price)
library(swirl) install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "R Programming") swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
swirl()
library(swirl) install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "Getting and Cleaning data") swirl()
library(swirl) install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "R Programming") swirl()
swirl()
library(swirl) install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "Exploratory Data Analysis") swirl()
diamonds %>% select(c(carat, price))
my_attributes <- c('carat', 'price')
my_attributes <- c('carat', 'price')
select(diamonds, .dots= my_attributes)
diamonds %>% select(.dots = my_attributes)
select(diamonds, .dots = my_attributes)
diamonds %>% select_(.dots = my_attributes)
select(diamonds, one_of(my_attributes))
diamonds %>% select(one_of(my_attributes))
diamonds[, my_attributes]
select(diamonds[1,7])
select(diamonds, 1,7)
diamonds %>% select(1,7)
select(diamonds, starts_with(c))
select(diamonds, starts_with("c"))
diamonds %>% select(starts_with("c"))
select(diamonds, ends_with("e"))
diamonds %>% select(ends_with("e"))
diamonds %>% select(ends_with("E"))
select(contains("l"))
select(diamonds, contains("l"))
diamonds %>% contains("l")
diamonds %>% select (contains("l"))
select(diamonds, matches("r.+t"))
diamonds %>% select(matches"r.+t")
diamonds %>% select(matches("r.+t"))
select(-carat, - price)
select(diamonds, -carat, - price)
diamonds %>% select(-carat, - price)
select(diamonds, select(-1, -7))
select(diamonds, select(one_of(-1, -7)))
select(diamonds, one_of(-1, -7))
diamonds %>% select(-1, -7)
select(diamonds, c(-1, -7))
filter(diamonds, cut = "Ideal")
filter(diamonds, cut == "Ideal")
diamonds %>% filter(cut == "Ideal")
diamonds[diamonds$cut == "Ideal"]
diamonds[diamonds$cut == "Ideal",]
filter(diamonds, cut %in% c("Ideal", "Good"))
diamonds %>% filter(cut %in% c("Ideal, "Good""))
diamonds %>% filter(cut %in% c("Ideal", "Good"))
filter(diamonds, filter(carat>2, price < 14000))
filter(diamonds, filter(carat > 2, price < 14000))
filter(diamonds, carat > 2, price < 14000)
diamonds %>% filter(carat > 2, price < 14000)
filter(diamonds, carat < 1 | carat > 5)
diamonds %>% filter(carat < 1 | carat > 5)
slice(diamonds, c(1:5, 8, 15:20))
diamonds %>% slice(c(1:5, 8, 15:20))
mutate(diamonds, price/carat)
mutate(diamonds, price/carat, "test")
mutate(diamonds, price/carat as ttt)
mutate(diamonds, ratio = price/carat)
diamonds %>% mutate(ratio = price/carat)
mutate(select (carat, price), ratio = price/carat)
mutate(diamonds, select (carat, price), ratio = price/carat)
mutate(diamonds, select c(carat, price), ratio = price/carat)
mutate(diamonds, select c("carat", "price"), ratio = price/carat)
mutate(diamonds, ratio = price/carat, select carat, price)
diamonds %>% select carat, price %>% mutate (ratio = price/carat)
diamonds %>% select (carat, price) %>% mutate (ratio = price/carat)
set <- select(carat, price)
set <- select(diamonds$carat, diamonds$price)
set <- select_(diamonds$carat, diamonds$price)
set <- select c(carat, price)
set <- select(diamonds, carat, price)
mutate(set, ratio = price/carat)
diamonds %>% select (carat, price) %>% mutate (Ratio = price/carat, Double = Ratio*2)
set <- select(diamonds, carat, price)
mutate(set, Ratio = price / carat, Double = Ratio/2)
summarise(diamonds, mean(price))
diamonds %>% summarise(mean(price))
summarise(diamonds, AvgPrice = mean(price), MedianPrice=median(price), AvgCarat = mean(carat))
group_by(diamonds, cut)
data_grouped <- group_by(diamonds, cut)
summarise(data_grouped, AvgPrice = mean(price))
data_grouped
diamonds %>% group_by(cut) %>% summarise (AvgPrice = mean(price))
data_grouped <- group_by(diamonds$cut)
data_grouped <- group_by(diamonds, cut)
data_grouped
data_grouped <- group_by_(diamonds, cut)
data_grouped <- group_by(diamonds, cut)
diamonds
data_grouped
diamonds %>% group_by(cut)
data_grouped <- group_by(diamonds, cut, color)
summarise(data_grouped, AvgPrice = mean(price), SumCarat = sum(carat))
diamonds %>%   group_by(cut, color) %>%   summarise(AvgPrice = mean(price), SumCarat = sum(carat))
data_grouped <- group_by(diamonds, cut)
data_summary <- summarise(data_grouped, AvgPrice = mean(price), SumCarat = sum(carat))
arrange(data_summary, AvgPrice)
diamonds %>% group_by(cut) %>% summarise(AvgPrice = mean(price), SumCarat = sum(carat)) %>% arrange(AvgPrice)
library(magrittr)
first_list <- list(a = matrix(1:9, 3), b = 1:5, c = matrix(1:16, 2), d = 2)
first_list
second_list <- list(a = matrix(1:9, 3), b = 1:7, c = matrix(1:16, 8), d = 2)
second_list
mapply(identical, first_list, second_list)
simple_function <- function(first_list, second_list) {     # nrow cannot handle vectors, but     # NROW treats each input as a vector and can      # treat each row as a vector     NROW(first_list) + NROW(second_list) }
mapply(simple_function, first_list, second_list)
?nrow
?NROW
first_list <- list(a = matrix(1:9, 3), b = 1:5, c = matrix(1:16, 2), d = 2)
first_list
second_list <- list(a = matrix(1:9, 3), b = 1:7, c = matrix(1:16, 8), d = 2)
second_list
simple_function <- function(first_list, second_list) {     result <- NROW(first_list) + NROW(second_list)     return (result) }
mapply(simple_function, first_list, second_list)
first_list
second_list
mapply(simple_function(first_list, second_list))
mapply(simple_function, first_list, second_list)
?mapply
?magrittr
?magrittr
help("magrittr")
library(swirl) install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "Statistical Inference") swirl()
library(swirl)
install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "Open Intro / Overview of statistics ")
install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "Open Intro/Overview of statistics ")
install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "Open Intro/Overview of statistics")
install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "Open_Intro/Overview_of_statistics")
install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "Open_Intro")
swirl()
main()
?pwr.p.test
?pwr
?pwr
?pwr()
?pwr
??pwr
??pwr.p.testpower_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50),                     sig.level = 0.05,                     power = 0.80,                     alternative = "greater")
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50),                     sig.level = 0.05,                     power = 0.80,                     alternative = "greater")
library(pwr)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50),                     sig.level = 0.05,                     power = 0.80,                     alternative = "greater")
plot(power_changes)
power_changes
pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50),            sig.level = 0.01,            n = 40,            alternative = "greater")
library(pwr)
pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50),            sig.level = 0.01,            n = 40,            alternative = "greater")
pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.50),            sig.level = 0.01,            n = 40)
pwr.p.test(h = ES.h(p1 = 0.65, p2 = 0.50),            sig.level = 0.05,            power = 0.80)
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.65, p2 = 0.50),            sig.level = 0.05,            power = 0.80)
plot(power_changes)
plot(power_changes)
power_changes
?cohen.ES
effect_size <- cohen.ES(test = "r", size = "medium")
effect_size
pwr.r.test(r = cohen.ES(test = "r", size = "medium")$effect.size,   power = 0.80, sig.level = 0.05)
pwr.r.test(r = effect_size,   power = 0.80, sig.level = 0.05)
pwr.r.test(r = effect_size$effect.size,   power = 0.80, sig.level = 0.05)
pwr.p.test(h = c(0.2, 0.5, 0.8),            n = 20,            sig.level = 0.05)
multiple_effect_changes <- pwr.p.test(h = c(0.2, 0.5, 0.8),            n = 20,            sig.level = 0.05)
plot(multiple_effect_changes)
plot(multiple_effect_changes$n)
pwr.2p.test(h = ES.h(p1 = 0.55, p2 = 0.50), sig.level = 0.05, power = .80)
pwr.2p.test(h = ES.h(p1 = 0.10, p2 = 0.05), sig.level = 0.05, power = .80)
cohen.ES(test = "p", size = "small")
pwr.2p2n.test(h = 0.2, n1 = 543, n2 = 675, sig.level = 0.05)
pwr.2p2n.test(h = 0.2, n1 = 763, power = 0.8, sig.level = 0.05)
set <- select(diamonds, carat, price)
data(diamonds) # cant find dataset - needs package = data(diamonds, package = "ggplot2") head(diamonds, 4) # show 4 x 10 items from diamonds dataset dim(head(diamonds, 4)) # get dimensions of this view # Alternate way to do this with pipes library(magrittr) diamonds %>% head(4) %>% dim # Initialize x x <- c(0.109, 0.359, 0.63, 0.996, 0.515, 0.142, 0.017, 0.829, 0.907) # Compute the logarithm of x, return suitable differences,  # compute the exponential function and round the result round(exp(diff(log(x))), 1) # Alternative way to do this with pipes library(magrittr) # Perform the same computations on x as above # No need to reload x - just showing alternate example in full format x <- c(0.109, 0.359, 0.63, 0.996, 0.515, 0.142, 0.017, 0.829, 0.907) x %>% log() %>%     diff() %>%     exp() %>%     round(1) # Before using a tibble head(diamonds) class(diamonds) # Install and use dplyr to access tibbles install.packages("dplyr") library(dplyr) head(diamonds) class(diamonds) # Select example select(diamonds, carat, price) # with pipes alternative syntax diamonds %>% select(carat, price) # Or using a vector containing columns diamonds %>% select(c(carat, price)) # If attributes are stored in a variable, pass to .dots my_attributes <- c('carat', 'price') select_(diamonds, .dots = my_attributes) # pipes alternative diamonds %>% select_(.dots = my_attributes) # Newer method select(diamonds, one_of(my_attributes)) # pipes alternative diamonds %>% select(one_of(my_attributes)) # Select using square brackets diamonds[, my_attributes] # and using their positions in tbl select(diamonds, 1, 7) # pipes alternative diamonds %>% select(1,7) # Starts with, ends with, contains # This shows all attributes starting with "c" select(diamonds, starts_with("c")) # pipes alternative diamonds %>% select(starts_with("c")) # Attributes ending with "e" - not case sensitive select(diamonds, ends_with("e")) #pipes alternative diamonds %>% select(ends_with("e")) # Attributes containing the letter "l" select(diamonds, contains("l")) # pipes alternative diamonds %>% select(contains("l")) # Regular expression to find any letter followed by # a wildcard and then any letter select(diamonds, matches("r.+t")) # pipes alternative diamonds %>% select(matches("r.+t")) # Designate columns not for selection select(diamonds, -carat, - price) # pipes alternative diamonds %>% select(-carat, - price) # or by position select(diamonds, c(-1, -7)) # pipes alternative diamonds %>% select(-1, -7) # Filter logical expression filter(diamonds, cut == "Ideal") # pipes alternative diamonds %>% filter(cut == "Ideal") # old method diamonds[diamonds$cut == "Ideal",] # Using %in% operator filter(diamonds, cut %in% c("Ideal", "Good")) # Pipes alternative diamonds %>% filter(cut %in% c("Ideal", "Good")) # Using compound filtering filter(diamonds, carat > 2, price < 14000) # Pipes alternative diamonds %>% filter(carat > 2, price < 14000) # Logical statement filter(diamonds, carat < 1 | carat > 5) # Pipes alternative diamonds %>% filter(carat < 1 | carat > 5) # Slice used to return rows of requested results slice(diamonds, c(1:5, 8, 15:20)) # Pipes alternative diamonds %>% slice(c(1:5, 8, 15:20)) # Mutate to add a new column and give it a name mutate(diamonds, ratio = price/carat) # Pipes alternative diamonds %>% mutate(ratio = price / carat) # We can also select some variables before mutate # Here we need to do this in 2 lines
set <- select(diamonds, carat, price)
mutate(set, ratio = price / carat)
set <- select(diamonds, carat, price)
mutate(set, Ratio = price / carat, Double = Ratio*2)
summarise(diamonds, AvgPrice = mean(price),                     MedianPrice = median(price),                     AvgCarat = mean(carat))
