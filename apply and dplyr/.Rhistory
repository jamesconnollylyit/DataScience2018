my_list <- list(a = matrix(1:9, 3), b = 1:5, c = matrix(1:4, 2), d = 2)
my_list
lapply(my_list, sum)
library(magrittr)
data(diamonds, package = "ggplot2")
dim(head(diamonds, n=4))
dim(the_names)
the_names <- c("James", "John", "Joe")
lapply(the_names, nchar)
dim(the_names)
first_list <- list(a = matrix(1:9, 3), b = 1:5, c = matrix(1:16, 2), d = 2)
dim(first_list)
first_list
first_list <- list(a = matrix(1:9, 3))
dim(first_list)
?dim
head(diamonds, 4)
dim(head(diamonds, n=4))
dim(head(diamonds, n=4))
data(diamonds)
diamonds %>% head(4) %>% dim
dim(head(diamonds, 4)) # get dimensions of this view
head(diamonds)
class(diamonds)
library(dplyr)
install.packages("dplyr")
library(dplyr)
head(diamonds)
head(diamonds)
class(diamonds)
diamonds
select(diamonds, carat, price)
diamonds %>% select(carat, price)
library(swirl) install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "R Programming") swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
swirl()
library(swirl) install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "Getting and Cleaning data") swirl()
library(swirl) install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "R Programming") swirl()
swirl()
library(swirl) install_course_zip("c:/swirl_courses-master.zip", multi = TRUE, which_course = "Exploratory Data Analysis") swirl()
diamonds %>% select(c(carat, price))
my_attributes <- c('carat', 'price')
my_attributes <- c('carat', 'price')
select(diamonds, .dots= my_attributes)
diamonds %>% select(.dots = my_attributes)
select(diamonds, .dots = my_attributes)
diamonds %>% select_(.dots = my_attributes)
select(diamonds, one_of(my_attributes))
diamonds %>% select(one_of(my_attributes))
diamonds[, my_attributes]
select(diamonds[1,7])
select(diamonds, 1,7)
diamonds %>% select(1,7)
select(diamonds, starts_with(c))
select(diamonds, starts_with("c"))
diamonds %>% select(starts_with("c"))
select(diamonds, ends_with("e"))
diamonds %>% select(ends_with("e"))
diamonds %>% select(ends_with("E"))
select(contains("l"))
select(diamonds, contains("l"))
diamonds %>% contains("l")
diamonds %>% select (contains("l"))
select(diamonds, matches("r.+t"))
diamonds %>% select(matches"r.+t")
diamonds %>% select(matches("r.+t"))
select(-carat, - price)
select(diamonds, -carat, - price)
diamonds %>% select(-carat, - price)
select(diamonds, select(-1, -7))
select(diamonds, select(one_of(-1, -7)))
select(diamonds, one_of(-1, -7))
diamonds %>% select(-1, -7)
select(diamonds, c(-1, -7))
filter(diamonds, cut = "Ideal")
filter(diamonds, cut == "Ideal")
diamonds %>% filter(cut == "Ideal")
diamonds[diamonds$cut == "Ideal"]
diamonds[diamonds$cut == "Ideal",]
filter(diamonds, cut %in% c("Ideal", "Good"))
diamonds %>% filter(cut %in% c("Ideal, "Good""))
diamonds %>% filter(cut %in% c("Ideal", "Good"))
filter(diamonds, filter(carat>2, price < 14000))
filter(diamonds, filter(carat > 2, price < 14000))
filter(diamonds, carat > 2, price < 14000)
diamonds %>% filter(carat > 2, price < 14000)
filter(diamonds, carat < 1 | carat > 5)
diamonds %>% filter(carat < 1 | carat > 5)
slice(diamonds, c(1:5, 8, 15:20))
diamonds %>% slice(c(1:5, 8, 15:20))
mutate(diamonds, price/carat)
mutate(diamonds, price/carat, "test")
mutate(diamonds, price/carat as ttt)
mutate(diamonds, ratio = price/carat)
diamonds %>% mutate(ratio = price/carat)
mutate(select (carat, price), ratio = price/carat)
mutate(diamonds, select (carat, price), ratio = price/carat)
mutate(diamonds, select c(carat, price), ratio = price/carat)
mutate(diamonds, select c("carat", "price"), ratio = price/carat)
mutate(diamonds, ratio = price/carat, select carat, price)
diamonds %>% select carat, price %>% mutate (ratio = price/carat)
diamonds %>% select (carat, price) %>% mutate (ratio = price/carat)
set <- select(carat, price)
set <- select(diamonds$carat, diamonds$price)
set <- select_(diamonds$carat, diamonds$price)
set <- select c(carat, price)
set <- select(diamonds, carat, price)
mutate(set, ratio = price/carat)
diamonds %>% select (carat, price) %>% mutate (Ratio = price/carat, Double = Ratio*2)
set <- select(diamonds, carat, price)
mutate(set, Ratio = price / carat, Double = Ratio/2)
summarise(diamonds, mean(price))
diamonds %>% summarise(mean(price))
summarise(diamonds, AvgPrice = mean(price), MedianPrice=median(price), AvgCarat = mean(carat))
group_by(diamonds, cut)
data_grouped <- group_by(diamonds, cut)
summarise(data_grouped, AvgPrice = mean(price))
data_grouped
diamonds %>% group_by(cut) %>% summarise (AvgPrice = mean(price))
data_grouped <- group_by(diamonds$cut)
data_grouped <- group_by(diamonds, cut)
data_grouped
data_grouped <- group_by_(diamonds, cut)
data_grouped <- group_by(diamonds, cut)
diamonds
data_grouped
diamonds %>% group_by(cut)
data_grouped <- group_by(diamonds, cut, color)
summarise(data_grouped, AvgPrice = mean(price), SumCarat = sum(carat))
diamonds %>%   group_by(cut, color) %>%   summarise(AvgPrice = mean(price), SumCarat = sum(carat))
data_grouped <- group_by(diamonds, cut)
data_summary <- summarise(data_grouped, AvgPrice = mean(price), SumCarat = sum(carat))
arrange(data_summary, AvgPrice)
diamonds %>% group_by(cut) %>% summarise(AvgPrice = mean(price), SumCarat = sum(carat)) %>% arrange(AvgPrice)
library(magrittr)
first_list <- list(a = matrix(1:9, 3), b = 1:5, c = matrix(1:16, 2), d = 2)
first_list
second_list <- list(a = matrix(1:9, 3), b = 1:7, c = matrix(1:16, 8), d = 2)
second_list
mapply(identical, first_list, second_list)
simple_function <- function(first_list, second_list) {     # nrow cannot handle vectors, but     # NROW treats each input as a vector and can      # treat each row as a vector     NROW(first_list) + NROW(second_list) }
mapply(simple_function, first_list, second_list)
?nrow
?NROW
first_list <- list(a = matrix(1:9, 3), b = 1:5, c = matrix(1:16, 2), d = 2)
first_list
second_list <- list(a = matrix(1:9, 3), b = 1:7, c = matrix(1:16, 8), d = 2)
second_list
simple_function <- function(first_list, second_list) {     result <- NROW(first_list) + NROW(second_list)     return (result) }
mapply(simple_function, first_list, second_list)
first_list
second_list
mapply(simple_function(first_list, second_list))
mapply(simple_function, first_list, second_list)
?mapply
?magrittr
?magrittr
help("magrittr")
